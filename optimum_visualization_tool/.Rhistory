install.packages(c("cclust", "ggdendro", "NbClust", "pvclust"))
require(getopt)
require(dplyr)
require(stats)
require(ape) #contains phylo related functions; nj and bionj
require(phangorn) #contains upgma
# require(farver)
require(parallel) #for multi-core
# require(pcaPP) #https://rdrr.io/cran/pcaPP/man/cor.fk.html, for fast Kendall-tau estimation
require(ccaPP) #c++ implemented calculation; corKendall corPearson, corSpearman; https://search.r-project.org/CRAN/refmans/ccaPP/html/corFunctions.html
require(permute)
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
colnames(dist_table) <- dist_df$X1 #place OTU names to column names
row.names(dist_table) <- dist_df$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
#return (as.dist(dist_df)) # return ape::dist() object, say mdist
return(as.matrix(dist_df)) # return dist()
}
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/fungi_bionj_317/sym.mat.fp.10"
print(read_dist_mat(load_path))
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
colnames(dist_df) <- dist_df$X1 #place OTU names to column names
row.names(dist_df) <- dist_df$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
#return (as.dist(dist_df)) # return ape::dist() object, say mdist
return(as.matrix(dist_df)) # return dist()
}
print(read_dist_mat(load_path))
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/fungi_bionj_317/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
print(ret_mat)
colnames(ret_mat)
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
colnames(dist_df) <- dist_df$X1 #place OTU names to column names
row.names(dist_df) <- dist_df$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
return(as.dist(dist_df)) # return ape::dist() object, say mdist
# return(as.matrix(dist_df)) # return dist()
}
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/fungi_bionj_317/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
print(ret_mat)
colnames(ret_mat)
as.matrix(ret_mat)
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/primate_test_bionj/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
print(ret_mat)
as.matrix(ret_mat)
print(as.data.frame(ret_mat))
print(ret_mat)
as.data.frame(as.matrix(ret_mat))
ret_df <- as.data.frame(as.matrix(ret_mat))
colnames(ret_df)
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
print(dist_df)
colnames(dist_df) <- dist_df$X1 #place OTU names to column names
row.names(dist_df) <- dist_df$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
#return(as.dist(dist_df)) # return ape::dist() object, say mdist
# return(as.matrix(dist_df)) # return dist()
dist_df
tmp_colnames
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
print(dist_df)
dist_df$X1
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
print(dist_df)
colnames(dist_df)
dist_df$X1
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
dist_table
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
print(dist_df)
colnames(dist_df) <- dist_table$X1 #place OTU names to column names
row.names(dist_df) <- dist_table$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
return(as.dist(dist_df)) # return ape::dist() object, say mdist
# return(as.matrix(dist_df)) # return dist()
}
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/primate_test_bionj/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
print(ret_mat)
ret_df <- as.data.frame(as.matrix(ret_mat))
colnames(ret_df)
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
print(dist_df)
colnames(dist_df) <- dist_table$X1 #place OTU names to column names
row.names(dist_df) <- dist_table$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
# return(as.dist(dist_df)) # return ape::dist() object, say mdist
return(as.matrix(dist_df)) # return dist()
}
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/primate_test_bionj/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
print(ret_mat)
as.dist(ret_mat)
as.vector(as.dist(ret_mat))
l_emat_thmax_count <- list()
l_emat_thmax_count
subset_dist_mat <- function(dist_mat, exclude_list)
{
edist_mat<- dist_mat[
!(row.names(sym_matrix) %in% exclude_list) #row subset
, !(colnames(sym_matrix) %in% exclude_list) #col subset
]
return(edist_mat)
}
upper_threshold=0.99999999
ret_mat <- read_dist_mat(load_path)
upper_threshold=0.99999999
outgroup_list = c("9606_R")
sum(as.vector(as.dist(subset_dist_mat(x, )))>=upper_threshold)
upper_threshold=0.99999999
outgroup_list = c("9606_R")
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
ret_mat <- read_dist_mat(load_path)
read_dist_mat <- function(load_path)
{
tmp_colnames <-  c(seq(1:(length(readLines(load_path))))) #temporarly assign to fit a number of columns when filled in read.table
dist_table <- read.table(
file = load_path
, sep = "" # all white spaces (reduce)
, header= F
, skip = 1 #skip the first row (a number of OTUS)
, as.is = T #recycling rule to guess variable class
, col.names = tmp_colnames # to align
, fill = T #able to read triangular matrix
)
## reform to square, then assign names
dist_df <- as.data.frame(dist_table[,-1]) #exclude the first line, which is a number of OTUs
# print(dist_df)
colnames(dist_df) <- dist_table$X1 #place OTU names to column names
row.names(dist_df) <- dist_table$X1 #place OTU names to row names
if (rowSums(is.na(dist_df[1,]))!=0) #when triangular matrix given, it is necessary to make it symetric before sort by item name order
{
dist_df[is.na(dist_df)] <- 0 #set all NAs to 0s before merge
dist_df <- dist_df + t(dist_df) # lower triangle + upper triangle
}
# return(as.dist(dist_df)) # return ape::dist() object, say mdist
return(as.matrix(dist_df)) # return as a matrix
}
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/primate_test_bionj/sym.mat.fp.10"
ret_mat <- read_dist_mat(load_path)
upper_threshold=0.99999999
outgroup_list = c("9606_R")
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
subset_dist_mat <- function(dist_mat, exclude_list)
{
edist_mat<- dist_mat[
!(row.names(dist_mat) %in% exclude_list) #row subset
, !(colnames(dist_mat) %in% exclude_list) #col subset
]
return(edist_mat)
}
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/primate_test_bionj/sym.mat.fp.24"
ret_mat <- read_dist_mat(load_path)
upper_threshold=0.99999999
outgroup_list = c("9606_R")
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/fungi_bionj_317/sym.mat.fp.20"
ret_mat <- read_dist_mat(load_path)
upper_threshold=0.99999999
outgroup_list = c("9606_R")
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
load_path = "/home/jjc/Desktop/ffp_optimum_plotly/Shiny_app/fungi_bionj_317/sym.mat.fp.20"
outgroup_list = c("rnd_min_1", "rnd_max_9")
ret_mat <- read_dist_mat(load_path)
upper_threshold=0.99999999
sum(as.vector(as.dist(subset_dist_mat(ret_mat, outgroup_list)))>=upper_threshold)
sum(as.vector(as.dist(ret_mat))>=upper_threshold)
# do_SEIR <- function(time, stat, params)
do_SEIR <- function(time_range, params)
{
## Derivatives function for closed SEIR model:
SEIR_dede <- function(time, state, parameters) {
## Parameters:
beta <- parameters["R0"] / parameters["infectiousPeriod"]
f <- 1 / parameters["latentPeriod"]
rec <- 1 / parameters["infectiousPeriod"]
latentPeriod <- parameters["latentPeriod"]
## States:
S <- state["S"]
E <- state["E"]
I <- state["I"]
R <- state["R"]
N <- S + E + I + R
## Derivatives:
if (time < latentPeriod) {
SLag <- S
ILag <- I
} else {
lagStates <- lagvalue(time-latentPeriod)
SLag <- lagStates[1]
ILag <- lagStates[3]
}
dS <- -beta * S * I/N
dE <- beta * S * I/N - beta * SLag * ILag/N
dI <- beta * SLag * ILag/N - rec * I
dR <- rec * I
return(list(c(dS, dE, dI, dR)))
}
## Trajectory for closed SEIR model:
trajectory_df <- as.data.frame(
dede(y = c(S = (100000-1), E = 0, I = 1, R = 0),
# times = seq(from = 0, to = 365, by = 0.1),
# parms = c(R0 = 3.25, latentPeriod = 8, infectiousPeriod = 7),
times = time_range,
parms = params,
func = SEIR_dede, method="lsoda")
)
# print(head(trajectory_df, n=100))
trajectory_melt_df <- melt(trajectory_df, id.vars=c("time"))
print(head(trajectory_melt_df, n=60))
# ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State)) +
ggplot(data=trajectory_melt_df, aes(x=time, y=value, color=variable)) +
# geom_line(aes(y = S, col = "S"), size = 1.2) +
# geom_line(aes(y = E, col = "E"), size = 1.2) +
# geom_line(aes(y = I, col = "I"), size = 1.2) +
geom_line(size = 1.0) +
labs(x = "Time (days)", y = "Number of people")
}
time_range <- seq(from = 0, to = 365, by = 0.1)
params <- c(R0 = 3.25, latentPeriod = 8, infectiousPeriod = 7)
do_SEIR(time_range, params)
# do_SEIR <- function(time, stat, params)
do_SEIR <- function(time_range, params)
{
## Derivatives function for closed SEIR model:
SEIR_dede <- function(time, state, parameters) {
## Parameters:
beta <- parameters["R0"] / parameters["infectiousPeriod"]
f <- 1 / parameters["latentPeriod"]
rec <- 1 / parameters["infectiousPeriod"]
latentPeriod <- parameters["latentPeriod"]
## States:
S <- state["S"]
E <- state["E"]
I <- state["I"]
R <- state["R"]
N <- S + E + I + R
## Derivatives:
if (time < latentPeriod) {
SLag <- S
ILag <- I
} else {
lagStates <- lagvalue(time-latentPeriod)
SLag <- lagStates[1]
ILag <- lagStates[3]
}
dS <- -beta * S * I/N
dE <- beta * S * I/N - beta * SLag * ILag/N
dI <- beta * SLag * ILag/N - rec * I
dR <- rec * I
return(list(c(dS, dE, dI, dR)))
}
## Trajectory for closed SEIR model:
trajectory_df <- as.data.frame(
dede(y = c(S = (100000-1), E = 0, I = 1, R = 0),
# times = seq(from = 0, to = 365, by = 0.1),
# parms = c(R0 = 3.25, latentPeriod = 8, infectiousPeriod = 7),
times = time_range,
parms = params,
func = SEIR_dede, method="lsoda")
)
# print(head(trajectory_df, n=100))
trajectory_melt_df <- melt(trajectory_df, id.vars=c("time"))
print(head(trajectory_melt_df, n=60))
# ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State)) +
ggplot(data=trajectory_melt_df, aes(x=time, y=value, color=variable)) +
# geom_line(aes(y = S, col = "S"), size = 1.2) +
# geom_line(aes(y = E, col = "E"), size = 1.2) +
# geom_line(aes(y = I, col = "I"), size = 1.2) +
geom_line(size = 1.0) +
labs(x = "Time (days)", y = "Number of people")
}
time_range <- seq(from = 0, to = 365, by = 0.1)
params <- c(R0 = 3.25, latentPeriod = 8, infectiousPeriod = 7)
do_SEIR(time_range, params)
require(deSolve)
time_range <- seq(from = 0, to = 365, by = 0.1)
params <- c(R0 = 3.25, latentPeriod = 8, infectiousPeriod = 7)
do_SEIR(time_range, params)
## implement SEIR model
require(reshape)
do_SEIR(time_range, params)
require(ggplot2)
do_SEIR(time_range, params)
